--- 
#Created by Kelvyn Ng on 07 Jan 2022
#Purpose to Generate HTML Report for Selected Server
 - gather_facts: false
   hosts: "{{ deployment_host_group }}"
   name: Windows HealthCheck
   vars:
   #Variable Collected from AAP Extra Variable
   - dusername: "{{ winsvc_username }}" # ADID
   - tusername: "{{ task_username }}" # ADID
   - mpath: "{{ tempfolder }}" # Example: 'D:/ServerHealthCheck/'
   - tpath: "{{ tempfolder }}\\source" 
   - dpath: "{{ tempfolder }}\\report\\" 
     #   - spath: "{{ source_path }}" # Example: /ant/deployment_package/PScripts
   - rpath: "{{ report_path }}" # Example: report_path: /ant/deployment_package/html/
   #Function declaration
   #
   #Gather Win Services Info
   - pwshell_winsvc: Get-WmiObject -Class Win32_Service |  Where-Object {$_.StartName -match '{{ dusername }}'} | Select-Object name, startname, startmode, state, pathname | Export-Csv "{{ tpath }}\$(hostname)-winservices.csv"

   #Gather Task Scheduler Info
   - pwdshell_tsch: Get-ScheduledTask |where { $_.Principal.userid -match '{{ tusername }}'} |Get-ScheduledTaskInfo | Select-Object TaskName, NextRunTime, Status, LastRunTime, LastTaskResult, TaskPath | Export-Csv "{{ tpath }}\$(hostname)-taskschedule.csv"

     #Gather AppPools Info
   - pwdshell_apppools: | #Invoke-Command -ComputerName $(hostname) -ScriptBlock {Import-Module WebAdministration; Get-ChildItem -Path IIS://AppPools;} | Export-Csv '{{ tpath }}\$(hostname)-appPools.csv'
           Import-Module WebAdministration;
           $compName = hostname
           $apppoollist =@()
           $apppool = Get-ChildItem -Path IIS:\AppPools\ | select *
           foreach($app in $apppool){
               $apppoolobj = "" | select "Name", "State", "managedRuntimeVersion", "managedPipelineMode","username","identityType", "timeout", "regulartimeinterval", "recyclingtime1", "recyclingtime2"
               $apppoolobj.Name = $app.Name
               $apppoolobj.State = $app.state
               $apppoolobj.managedRuntimeVersion = $app.managedRuntimeVersion
               $apppoolobj.managedPipelineMode =  $app.managedPipelineMode
               $apppoolobj.username = ($app | select @{e={$_.processModel.username};l="username"}).username
               $apppoolobj.identityType = ($app | select @{e={$_.processModel.identityType};l="identityType"}).identityType
               $apppoolobj.timeout = ($app | select @{e={$_.processModel.idletimeout.minutes};l="timeout"}).timeout
               $apppoolobj.regulartimeinterval = $app.recycling.periodicRestart.time
               $recyclingcount = $app.recycling.periodicRestart.schedule.Collection
               $apppoolobj.recyclingtime1 = $recyclingcount[0].value
               $apppoolobj.recyclingtime2 = $recyclingcount[1].value
               $apppoollist += $apppoolobj
               $apppoolobj = $null
           }    
           $apppoollist | export-csv "{{ tpath }}\$(hostname)-apppoolist.csv" -Force

   - pwshell_html: |
        #CSS codes
        $header = @"
        <style>
        h1 { font-family: Arial, Helvetica, sans-serif; color: #e68a00; font-size: 28px; text-align: center; }
        h2 { font-family: Arial, Helvetica, sans-serif; color: #000099; font-size: 16px; text-align: center; }
        h5 { font-family: Arial, Helvetica, sans-serif; color: #000099; font-size: 10px; text-align: center; }
        table { font-size: 12px; border: 0px; font-family: Arial, Helvetica, sans-serif; margin: auto; box-shadow: 10px 10px 5px #888; border: thin ridge grey; }
        td { padding: 4px; margin: 0px; border: 0; }
        th { background: #395870; background: linear-gradient(#49708f, #293f50); color: #fff; font-size: 11px; text-transform: uppercase; padding: 10px 15px; vertical-align: middle; }
        tbody tr:nth-child(even) { background: #f0f0f2; }
        #CreationDate { font-family: Arial, Helvetica, sans-serif; color: #ff3300; font-size: 12px; text-align: center;}
        .StopStatus { color: #ff0000; }
        .RunningStatus { color: #008000; }
        </style>
        "@
        #Converting Win Svcs to HTML
        $WinServicesInfo = Import-CSV "{{ tpath }}\$(hostname)-winservices.csv" | ConvertTo-HTML -Property name, startname, startmode, state "<h1>Windows Services  Information</h1>" -PreContent "<h2>Window Services Information for ADID {{ dusername }} </h2>" 
        $WinServicesInfo = $WinServicesInfo -replace '<td>Running</td>','<td class="RunningStatus">Running</td>'
        $WinServicesInfo = $WinServicesInfo -replace '<td>Stopped</td>','<td class="StopStatus">Stopped</td>'
        $WinReport = ConvertTo-HTML -Body "$WinServicesInfo" -Head $header -Title "Information Report" -PostContent "<h5>Email Generated  Date: $(Get-Date)</h5>"
        $WinReport | Out-File "{{ dpath }}\$(hostname)-winservices.html"
     
        #Converting Task Schedule to HTML
        $TaskServicesInfo = Import-CSV "{{ tpath }}\$(hostname)-taskschedule.csv" | ConvertTo-HTML -Property TaskName, NextRunTime, Status, LastRunTime, LastTaskResult, TaskPath "<h1>Task Schedule Information</h1>" -PreContent "<h2>Task Schedule Information for ADID {{ tusername }} </h2>"
        $TaskServicesInfo = $TaskServicesInfo -replace '<td>Running</td>','<td class="RunningStatus">Running</td>'
        $TaskServicesInfo = $TaskServicesInfo -replace '<td>Stopped</td>','<td class="StopStatus">Stopped</td>'
        $TaskReport = ConvertTo-HTML -Body "$TaskServicesInfo" -Head $header -Title "Information Report" -PostContent "<h5>Email Generated  Date: $(Get-Date)</h5>"
        $TaskReport | Out-File "{{ dpath }}\$(hostname)-taskschedule.html"

        #Converting App Pools to HTML
        $AppServicesInfo = Import-CSV "{{ tpath }}\$(hostname)-apppoolist.csv" | ConvertTo-HTML -Property Name, State, PSPath, username, identityType, managedRuntimeVersion "<h1>App Pools Information</h1>" -PreContent "<h2>App Pools  Information </h2>"
        $AppServicesInfo = $AppServicesInfo -replace '<td>Running</td>','<td class="RunningStatus">Running</td>'
        $AppServicesInfo = $AppServicesInfo -replace '<td>Stopped</td>','<td class="StopStatus">Stopped</td>'
        $AppReport = ConvertTo-HTML -Body "$AppServicesInfo" -Head $header -Title "Information Report" -PostContent "<h5>Email Generated  Date: $(Get-Date)</h5>"
        $AppReport | Out-File "{{ dpath }}\$(hostname)-apppoolist.html"

   #GoGoGO Real work start here
   tasks:
   - name: Housekeeping Directory on Target Server
     win_file:
       path: "{{ mpath }}"
       state: absent
   
   - name: Creating Script Directory on Target Server
     win_file:
       path: "{{ tpath }}"
       state: directory

   - name: Creating Report Directory on Target Server
     win_file:
       path: "{{ dpath }}"
       state: directory

   - name: Generate Windows Services Info
     win_shell: '{{ pwshell_winsvc }}'
   - name: Generate Task Scheduler Info
     win_shell: '{{ pwdshell_tsch }}'
   - name: Generate AppPools Info
     win_shell: '{{ pwdshell_apppools }}'
   - name: Generate Windows Services HTML
     win_shell: '{{ pwshell_html }}'

   - name: List File
     register: listout
     win_find:
       paths: "{{ dpath }}"
       file_type: file
       patterns: ['*.html']
       age: -1000
   - debug:
      msg: "{{item}}"
     loop: "{{listout.files}}"

   - name: Transporting HTML file to Ansible
     fetch:
      src: "{{ item.path }}"
      dest: "{{rpath}}"
      flat: yes
     loop: "{{ listout.files }}"

 - hosts: localhost
   gather_facts: no
   tasks:
    - name: Touch File to activate sendmail
      shell: echo  "{{ mailrecpt }}" > /ant/deployment_package/html/maillist ; touch /ant/deployment_package/html/completed.400
      tags: email